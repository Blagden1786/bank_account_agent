from google import genai
from .savings_agent import savings_agent, SAVINGS_PROMPT
import re
# The triage agent will ask questions until it understands the ask, it will then generate a prompt for the other agent

TRIAGE_PROMPT = """You are a triage agent. Your goal is to find out what type of savings account the user is wanting to open. You should ask easy to understand questions until you get all of the required information and once this has been acquired produce a prompt to tell another agent to find the best account meeting the criteria.
The information you are trying to get is:
Type of account: ISA or not
Rate: Fixed or Variable
Access amount: None, instant, etc
Any interest calculation the user would like done: Eg Â£100 over 2 years

When asking a question use exactly the following format:
QUESTION: <Question>

When providing the prompt, do not produce any other text other than the prompt.

The information you have so far is:
"""

def triage_agent(prompt:str) -> str:
    """The triage agent function that interacts with the user to gather information about their savings account needs.

    Args:
        prompt (str): The initial prompt containing the triage instructions and any prior information.

    Returns:
        str: The final prompt generated by the triage agent to be used by the savings agent.
    """
    while True:
        # Run the triage agent
        client = genai.Client()
        # Generate the response
        response = client.models.generate_content(
            model="gemini-2.5-flash", contents=prompt).text

        next_question=re.search("^QUESTION", response)

        # No tool is called then the agent has sufficient info so it has produced the final prompt to be used by the savings agent
        if next_question == None:
            print("Thanks, I will now find the best account for you.")
            break

        print(response)
        answer = input("ANSWER: ")

        # Append the answer to the prompt for the next iteration
        prompt += f"\n{response}: ANSWER: {answer}"

    return response.text


def triage_agent_django(user_message:str) -> str:
    """The triage agent function for Django integration. It reads and writes to a prompt file to maintain state across requests.

    Args:
        user_message (str): The answer provided by the user to the triage agent's last question.

    Returns:
        str: The next question from the triage agent or the outcome from the savings agent.
    """
    # Read the triage prompt file
    prompt_file = open('triage_prompt.txt', 'r+')

    # If it is empty: add the triage prompt
    if not prompt_file.read(1):
        prompt_file.write(TRIAGE_PROMPT)

    # Append the user's message to the prompt file
    prompt_file.write(f"\nANSWER: {user_message}\n")

    # Get the prompt from the file
    prompt_file.seek(0)
    prompt = prompt_file.read()
    prompt_file.close()

    # Run the triage agent
    client = genai.Client()
    # Generate the response
    response = client.models.generate_content(
        model="gemini-2.5-flash", contents=prompt).text

    # Check if the response contains a question
    next_question=re.search("^QUESTION", response)

    # If the agent hasn't asked a question, it has enough info
    if next_question == None:
        # Switch to savings agent
        return savings_agent(SAVINGS_PROMPT + response, True)
    else:
        # Append the question to the prompt file
        prompt_file = open('triage_prompt.txt', 'a')
        prompt_file.write(f"\n{response}")
        prompt_file.close()
        return response
